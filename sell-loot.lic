=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#sell-loot
=end

custom_require.call(%w(common common-items common-money common-travel drinfomon equipmanager))

class SellLoot
  include DRC
  include DRCI
  include DRCM
  include DRCT

  def initialize
    EquipmentManager.new.empty_hands

    Flags.add('tip-accepted', '.* accepts your tip and slips it away with a smile')
    Flags.add('tip-declined', '.* declines your tip offer')
    Flags.add('tip-expired', 'Your tip offer to .* has expired')

    settings = get_settings
    town_data = get_data('town')
    @hometown = town_data[settings.hometown]
    @bankbot_name = settings.bankbot_name
    @bankbot_deposit_threshold = settings.bankbot_deposit_threshold

    sell_gems("#{settings.gem_pouch_adjective} pouch") if settings.sell_loot_pouch

    check_spare_pouch(settings.spare_gem_pouch_container, settings.gem_pouch_adjective) if settings.spare_gem_pouch_container

    sell_bundle if settings.sell_loot_bundle

    return if settings.sell_loot_skip_bank
    keep_amount, keep_type = parse(settings.sell_loot_money_on_hand.split(' '))
    withdrawals = convert_input(keep_amount, keep_type)
    deposit_coins
    check_bankbot(settings.hometown)
    withdraw(withdrawals)
  end

  def parse(setting)
    arg_definitions = [
      [
        { name: 'amount', regex: /\d+/i, variable: true, description: 'Number of coins to keep' },
        { name: 'type', regex: /\w+/i, variable: true, description: 'Type of coins to keep' }
      ],
      []
    ]

    args = parse_args(arg_definitions)

    keep_amount = args.amount || setting[0] || 3
    keep_type = args.type || setting[1] || 'silver'

    [keep_amount, keep_type]
  end

  def convert_input(keep_amount, keep_type)
    copper = convert_to_copper(keep_amount, keep_type)
    minimize_coins(copper)
  end

  def deposit_coins
    walk_to @hometown['exchange']['id']
    exchange_to = @hometown['currency']
    %w(dokoras kronars lirums)
      .reject { |currency| currency == exchange_to }
      .each { |currency| fput "exchange all #{currency} for #{exchange_to}" }

    walk_to @hometown['deposit']['id']
    fput 'deposit all'
  end

  def withdraw(withdrawals)
    withdrawals.each { |amount| fput "withdraw #{amount}" }
    fput 'check balance'
  end

  def check_bankbot(hometown)
    return unless @bankbot_name
    return unless @bankbot_deposit_threshold
    return unless DRRoom.pcs.include?(@bankbot_name)
    copper_on_hand = wealth(hometown)
    return if copper_on_hand <= @bankbot_deposit_threshold

    Flags.reset('tip-accepted')
    Flags.reset('tip-expired')
    Flags.reset('tip-declined')

    deposit_amount = copper_on_hand - @bankbot_deposit_threshold
    bput("tip #{@bankbot_name} #{deposit_amount} #{@hometown['currency']}", 'You offer')

    pause 0.5 until Flags['tip-accepted'] || Flags['tip-expired'] || Flags['tip-declined']
  end

  def sell_bundle
    return unless exists?('bundle')

    walk_to @hometown['tannery']['id']

    return if 'Remove what' == bput('remove my bundle', 'You remove', 'You sling', 'Remove what')
    bput('sell my bundle', 'ponders over the bundle', 'sorts through it')
    bput('stow rope', 'You put')
  end

  def check_spare_pouch(container, adj)
    fput("open my #{container}")
    return if inside?("#{adj} pouch", container)
    walk_to @hometown['gemshop']['id']
    clerk = which_clerk(@hometown['gemshop']['name'])
    fput("ask #{clerk} for #{adj} pouch")
    fput("put my pouch in my #{container}")
  end

  def which_clerk(clerks)
    clerks.is_a?(String) ? clerks : clerks.find { |clerk| DRRoom.npcs.include?(clerk) }
  end

  def sell_gems(container)
    case bput("open my #{container}", 'You open your', 'You open a', 'has been tied off', 'What were you referring to', 'That is already open')
    when 'has been tied off', 'What were you referring to'
      return
    end

    gems = get_gems(container)
    unless gems.empty?
      walk_to @hometown['gemshop']['id']
      clerk = which_clerk(@hometown['gemshop']['name'])

      gems.each do |gem|
        fput "get my #{gem}"
        fput "sell my #{gem} to #{clerk}"
      end
    end

    fput "close my #{container}"
  end
end

SellLoot.new
